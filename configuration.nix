# /mnt/etc/nixos/configuration.nix
{ config, pkgs, inputs, ... }:

let
  # Options from your setup.sh script
  btrfsMountOpts = [ "ssd" "compress=zstd" "noatime" ];
in
{
  imports = [
    ./hardware-configuration.nix # Generated by nixos-generate-config
  ];

  # Bootloader: systemd-boot
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.loader.efi.efiSysMountPoint = "/boot"; # Matches your EFI mount point

  # LUKS Encrypted Root
  # This assumes hardware-configuration.nix correctly identifies your LUKS partition.
  # The name "cryptroot" matches your setup.sh.
  boot.initrd.luks.devices."cryptroot" = {
    device = "/dev/disk/by-uuid/YOUR_ACTUAL_ROOT_PARTITION_UUID"; # IMPORTANT: Verify this in hardware-configuration.nix
    allowDiscards = true; # Good for SSDs
    preLVM = true; # Standard for non-LVM LUKS setups
  };

  # BTRFS Filesystems (based on your setup.sh subvolumes)
  fileSystems = {
    "/" = {
      device = "/dev/mapper/cryptroot";
      fsType = "btrfs";
      options = [ "subvol=@" ] ++ btrfsMountOpts;
    };
    "/home" = {
      device = "/dev/mapper/cryptroot";
      fsType = "btrfs";
      options = [ "subvol=@home" ] ++ btrfsMountOpts;
    };
    "/nix" = {
      device = "/dev/mapper/cryptroot";
      fsType = "btrfs";
      options = [ "subvol=@nix" ] ++ btrfsMountOpts;
      neededForBoot = true; # Crucial for /nix on a separate subvolume
    };
    "/.snapshots" = { # Or "/snapshots" if you prefer, adjust setup.sh if so
      device = "/dev/mapper/cryptroot";
      fsType = "btrfs";
      options = [ "subvol=@snapshots" ] ++ btrfsMountOpts;
    };
    "/var/log" = {
      device = "/dev/mapper/cryptroot";
      fsType = "btrfs";
      options = [ "subvol=@log" ] ++ btrfsMountOpts;
    };
    "/etc/nixos" = { # Configuration on its own subvolume
      device = "/dev/mapper/cryptroot";
      fsType = "btrfs";
      options = [ "subvol=@nixos-config" ] ++ btrfsMountOpts;
    };
    "/boot" = {
      # This should be defined in hardware-configuration.nix and point to your EFI partition
      # Example if hardware-configuration.nix doesn't pick it up (unlikely):
      # device = "/dev/disk/by-uuid/YOUR_EFI_PART_UUID";
      # fsType = "vfat";
      # Ensure it's correctly set in hardware-configuration.nix from /dev/nvme0n1p1
      # Usually looks like:
      # fileSystems."/boot" = {
      #   device = "/dev/disk/by-uuid/EFI_PART_UUID_HERE";
      #   fsType = "vfat";
      # };
    };
  };

  # Swapfile (created by setup.sh)
  swapDevices = [ { device = "/swapfile"; } ];

  # Networking
  networking.hostName = "saintbelow"; # Your desired hostname
  networking.networkmanager.enable = true;
  # Optional: disable wpa_supplicant if solely using NetworkManager
  # networking.wireless.enable = false;

  # Locale and Timezone
  time.timeZone = "Asia/Kolkata"; # Example, set your timezone
  i18n.defaultLocale = "en_US.UTF-8";
  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # User accounts
  users.users.saintbelow = {
    isNormalUser = true;
    description = "Saint Below";
    extraGroups = [ "networkmanager" "wheel" "video" "audio" ]; # wheel for sudo
    initialPassword = "changeme"; # CHANGE THIS IMMEDIATELY!
    shell = pkgs.zsh; # Or pkgs.bash;
  };
  # Allow users in 'wheel' group to use sudo
  security.sudo.wheelNeedsPassword = true;


  # Graphics: Intel i3 10th Gen Integrated Graphics (UHD Graphics G1/Gen11)
  services.xserver.videoDrivers = [ "modesetting" ]; # For Wayland, KMS is key
  boot.kernelModules = [ "i915" ];
  boot.initrd.availableKernelModules = [ "i915" "nvme" "xhci_pci" "usbhid" "sd_mod" "btrfs" ]; # Essential modules for boot

  # Wayland, Hyprland, and Ly Display Manager
  programs.hyprland = {
    enable = true;
    # package = inputs.hyprland.packages.${pkgs.system}.hyprland; # Uncomment if using hyprland from flake inputs
    xwayland.enable = true; # For X11 compatibility
  };

  services.displayManager.ly = {
    enable = true;
    defaultSession = "hyprland"; # Ensure this matches the desktop entry for Hyprland
  };
  # Disable X server if only using Wayland via Ly
  services.xserver.enable = false; # Ly handles Wayland sessions directly

  # PipeWire for audio
  sound.enable = true;
  hardware.pulseaudio.enable = false; # Disable pulseaudio if using pipewire
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # jack.enable = true; # Uncomment if you need JACK support
  };

  # XDG Portals (important for Flatpak, screenshots, etc. on Wayland)
  xdg.portal = {
    enable = true;
    wlr.enable = true; # For wlroots-based compositors like Hyprland
    # gtk portal needed for file pickers and other desktop integration features
    extraPortals = [ pkgs.xdg-desktop-portal-gtk pkgs.xdg-desktop-portal-hyprland ];
  };
  environment.sessionVariables.NIXOS_OZONE_WL = "1"; # Hint for Electron apps to use Wayland

  # Fonts
  fonts.packages = with pkgs; [
    noto-fonts
    noto-fonts-cjk-sans
    noto-fonts-emoji
    liberation_ttf
    font-awesome # For icons in Waybar/Rofi
    (nerdfonts.override { fonts = [ "JetBrainsMono" "FiraCode" ]; }) # Example Nerd Fonts
  ];

  # Laptop Optimizations & Power Management
  services.power-profiles-daemon.enable = true; # Modern power management
  # services.tlp.enable = true; # Alternative, usually more aggressive power saving
  # services.auto-cpufreq.enable = true; # Another alternative for CPU frequency scaling
  # ZRAM for better performance on systems with ample RAM or to reduce swap wear
  zramSwap.enable = true;

  # Necessary packages for a base Hyprland system
  environment.systemPackages = with pkgs; [
    git
    wget
    curl
    htop
    pciutils # For lspci
    usbutils # For lsusb
    neovim # Or your preferred editor for quick system edits
    unzip
    killall

    # Hyprland ecosystem / Wayland utilities
    kitty # Terminal
    waybar # Status bar
    swaybg # Wallpaper utility
    swaylock-effects # Screen locker (fancier version)
    swayidle # Idle daemon
    rofi-wayland # Application launcher
    wlogout # Logout menu
    mako # Notification daemon
    grim # Screenshot tool
    slurp # Region selection for grim
    wf-recorder # Screen recording
    wl-clipboard # Wayland clipboard utilities
    cliphist # Clipboard history manager
    polkit_gnome # Polkit agent for graphical authentication
    networkmanagerapplet # For Waybar NetworkManager integration
    pavucontrol # Volume control GUI (works with PipeWire-Pulse)
    brightnessctl # Control screen brightness
    playerctl # Control media players via MPRIS
    libnotify # For sending desktop notifications
    ffmpegthumbnailer # For video thumbnails in file managers
    # Add a file manager like thunar or dolphin if desired
    # thunar
    # dolphin
  ];

  # Enable flakes and new command syntax
  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # Garbage collection
  nix.gc = {
    automatic = true;
    dates = "weekly";
    options = "--delete-older-than 30d";
  };
  nix.settings.auto-optimise-store = true; # Optimise store by hard-linking identical files

  # Allow unfree packages if needed (e.g. for some drivers, codecs)
  nixpkgs.config.allowUnfree = true;

  # Enable OpenGL
  hardware.opengl = {
    enable = true;
    driSupport = true;
    driSupport32Bit = true; # For 32-bit games/apps
    extraPackages = with pkgs; [
      intel-media-driver # VAAPI driver for Intel GPUs
      # intel-vaapi-driver # Older VAAPI driver, intel-media-driver is preferred for Gen8+
      # libvdpau-va-gl # VDPAU-VAAPI backend
    ];
  };

  # Firmware for HP laptop (Wi-Fi, Bluetooth, etc.)
  hardware.enableRedistributableFirmware = true;

  # Enable Bluetooth support
  hardware.bluetooth.enable = true;
  services.blueman.enable = true; # Optional: GUI for Bluetooth

  # System services
  services.dbus.enable = true;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. Itâ€˜s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.05"; # Or "unstable", or the version you are installing
}
