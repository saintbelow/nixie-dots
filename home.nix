# /mnt/etc/nixos/home.nix
{ pkgs, inputs, ... }:

let
  # Define a basic Hyprland configuration string.
  # For a more complex setup, manage this as a separate hyprland.conf file
  # and link it using home.file."${config.xdg.configHome}/hypr/hyprland.conf".source = ./hyprland.conf;
  hyprlandConfig = ''
    # See https://wiki.hyprland.org/Configuring/Variables/ for more
    # For all categories, see https://wiki.hyprland.org/Configuring/Variables/

    # Autogenerated by Hyprland
    # Please note not all available settings / options are set here.
    # For a full list, see the wiki

    # Monitor configuration
    monitor=,preferred,auto,1 # Adjust as needed: e.g., eDP-1,1920x1080@60,0x0,1

    # Execute apps at launch
    exec-once = swaybg -m fill -i ~/.config/hypr/wallpaper.png # Set your wallpaper path
    exec-once = waybar
    exec-once = dunst # Or mako if you prefer (mako is in systemPackages)
    exec-once = nm-applet --indicator # NetworkManager applet
    exec-once = blueman-applet # Bluetooth applet
    exec-once = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP # For xdg-desktop-portal
    exec-once = /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 # Polkit agent
    exec-once = swayidle timeout 300 'swaylock -f' timeout 600 'hyprctl dispatch dpms off' resume 'hyprctl dispatch dpms on'
    exec-once = wl-paste --watch cliphist store # Clipboard history

    # Source a file (multi-file configs)
    # source = ~/.config/hypr/myColors.conf

    # Some default env vars.
    env = XCURSOR_SIZE,24
    env = HYPRCURSOR_THEME,Bibata-Modern-Ice # Example cursor theme, install it too
    env = HYPRCURSOR_SIZE,24
    env = GDK_BACKEND,wayland,x11 # Prefer Wayland for GTK apps
    env = QT_QPA_PLATFORM,wayland;xcb # Prefer Wayland for Qt apps
    env = SDL_VIDEODRIVER,wayland
    env = CLUTTER_BACKEND,wayland
    env = MOZ_ENABLE_WAYLAND,1 # For Firefox Wayland

    # Input settings
    input {
        kb_layout = us
        kb_variant =
        kb_model =
        kb_options =
        kb_rules =

        follow_mouse = 1
        touchpad {
            natural_scroll = true # Set to false if you prefer traditional scrolling
            disable_while_typing = true
        }
        sensitivity = 0 # -1.0 - 1.0, 0 means no modification.
    }

    general {
        gaps_in = 5
        gaps_out = 10
        border_size = 2
        col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
        col.inactive_border = rgba(595959aa)
        layout = dwindle # master or dwindle
    }

    decoration {
        rounding = 5
        blur {
            enabled = true
            size = 3
            passes = 1
            new_optimizations = true
        }
        drop_shadow = true
        shadow_range = 4
        shadow_render_power = 3
        col.shadow = rgba(1a1a1aee)
    }

    animations {
        enabled = true
        bezier = myBezier, 0.05, 0.9, 0.1, 1.05
        animation = windows, 1, 7, myBezier
        animation = windowsOut, 1, 7, default, popin 80%
        animation = border, 1, 10, default
        animation = borderangle, 1, 8, default
        animation = fade, 1, 7, default
        animation = workspaces, 1, 6, default
    }

    dwindle {
        pseudotile = true # master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
        preserve_split = true # you probably want this
    }

    master {
        new_is_master = true
    }

    gestures {
        workspace_swipe = true
        workspace_swipe_fingers = 3
    }

    # Window rules
    # Example windowrule v1
    # windowrule = float, ^(kitty)$
    # Example windowrule v2
    # windowrulev2 = float,class:^(kitty)$,title:^(kitty)$
    windowrulev2 = suppressevent maximize, class:.* # You probably want this.

    # Keybinds
    $mainMod = SUPER # Sets "Windows" key as main modifier

    bind = $mainMod, Q, exec, kitty # Open terminal
    bind = $mainMod, C, killactive,
    bind = $mainMod, M, exit, # Log out of Hyprland (requires a confirmation or wlogout)
    bind = $mainMod, E, exec, thunar # Open file manager (install thunar or another)
    bind = $mainMod, V, togglefloating,
    bind = $mainMod, R, exec, rofi -show drun # App launcher
    bind = $mainMod, P, pseudo, # dwindle
    bind = $mainMod, J, togglesplit, # dwindle

    # Move focus with mainMod + arrow keys
    bind = $mainMod, left, movefocus, l
    bind = $mainMod, right, movefocus, r
    bind = $mainMod, up, movefocus, u
    bind = $mainMod, down, movefocus, d

    # Switch workspaces with mainMod + [0-9]
    bind = $mainMod, 1, workspace, 1
    bind = $mainMod, 2, workspace, 2
    bind = $mainMod, 3, workspace, 3
    bind = $mainMod, 4, workspace, 4
    bind = $mainMod, 5, workspace, 5
    bind = $mainMod, 6, workspace, 6
    bind = $mainMod, 7, workspace, 7
    bind = $mainMod, 8, workspace, 8
    bind = $mainMod, 9, workspace, 9
    bind = $mainMod, 0, workspace, 10

    # Move active window to a workspace with mainMod + SHIFT + [0-9]
    bind = $mainMod SHIFT, 1, movetoworkspace, 1
    bind = $mainMod SHIFT, 2, movetoworkspace, 2
    bind = $mainMod SHIFT, 3, movetoworkspace, 3
    bind = $mainMod SHIFT, 4, movetoworkspace, 4
    bind = $mainMod SHIFT, 5, movetoworkspace, 5
    bind = $mainMod SHIFT, 6, movetoworkspace, 6
    bind = $mainMod SHIFT, 7, movetoworkspace, 7
    bind = $mainMod SHIFT, 8, movetoworkspace, 8
    bind = $mainMod SHIFT, 9, movetoworkspace, 9
    bind = $mainMod SHIFT, 0, movetoworkspace, 10

    # Scroll through existing workspaces with mainMod + scroll
    bind = $mainMod, mouse_down, workspace, e+1
    bind = $mainMod, mouse_up, workspace, e-1

    # Move/resize windows with mainMod + LMB/RMB and dragging
    bindm = $mainMod, mouse:272, movewindow
    bindm = $mainMod, mouse:273, resizewindow

    # Screenshotting
    bind = , Print, exec, grim -g "$(slurp)" - | wl-copy # Capture region and copy
    bind = SHIFT, Print, exec, grim -g "$(slurp)" ~/Pictures/Screenshots/$(date +'%Y-%m-%d_%H-%M-%S.png') # Capture region and save

    # Screen lock
    bind = $mainMod, L, exec, swaylock -f

    # Volume and Brightness (requires playerctl, brightnessctl)
    binde=, XF86AudioRaiseVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ +5%
    binde=, XF86AudioLowerVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ -5%
    bind =, XF86AudioMute, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle
    bind =, XF86AudioPlay, exec, playerctl play-pause
    bind =, XF86AudioNext, exec, playerctl next
    bind =, XF86AudioPrev, exec, playerctl previous
    binde=, XF86MonBrightnessUp, exec, brightnessctl set +5%
    binde=, XF86MonBrightnessDown, exec, brightnessctl set 5%-
  '';
in
{
  # Home Manager version
  home.stateVersion = "24.05"; # Or "unstable"

  # User specific packages
  home.packages = with pkgs; [
    firefox-wayland # Or just firefox, it should pick up Wayland if MOZ_ENABLE_WAYLAND=1
    # neovim # If you want user-specific neovim
    # vlc # Media player
    gimp # Image editor
    obsidian # Notes
    discord # Chat
    # Add any other user applications here
    
    # For Hyprland themeing
    bibata-cursors # Example cursor theme mentioned in hyprlandConfig
    # You might want a GTK theme manager like nwg-look or lxappearance
    # And GTK themes like dracula-theme, catppuccin-gtk etc.
    libsForQt5.qt5ct # For Qt5 theming
    libsForQt5.qt5gtk2 # Makes Qt5 apps use GTK2 style for better consistency
    dconf # Needed for GTK settings
  ];

  # Shell configuration (Zsh example)
  programs.zsh = {
    enable = true;
    enableAutosuggestions = true;
    enableCompletion = true;
    syntaxHighlighting.enable = true;
    shellAliases = {
      ll = "ls -l";
      update = "sudo nixos-rebuild switch --flake /etc/nixos#nixie";
      hmupdate = "home-manager switch --flake /etc/nixos#saintbelow@nixie"; # Assuming this structure or adjust to your flake output for home
    };
    # Oh My Zsh can be added here if desired
  };

  # Rofi configuration (basic, can be expanded)
  programs.rofi = {
    enable = true;
    package = pkgs.rofi-wayland; # Ensure Wayland variant
    theme = "dracula"; # Example theme, can be a path to a .rasi file
                       # Or use home.file to link a custom theme
    extraConfig = {
      modi = "drun,run,window";
      icon-theme = "Papirus"; # Make sure this icon theme is installed
      show-icons = true;
    };
  };

  # Hyprland configuration
  wayland.windowManager.hyprland = {
    enable = true;
    # package = inputs.hyprland.packages.${pkgs.system}.hyprland; # Uncomment if using hyprland from flake inputs
    # xwayland.enable = true; # Already in system config, but can be here too
    extraConfig = hyprlandConfig;
  };

  # Waybar configuration (basic example, manage as a separate file for complexity)
  programs.waybar = {
    enable = true;
    # package = pkgs.waybar; # Default from nixpkgs
    settings = [{
      layer = "top";
      position = "top";
      height = 30;
      modules-left = [ "hyprland/workspaces" "hyprland/mode" ];
      modules-center = [ "hyprland/window" ];
      modules-right = [ "pulseaudio" "network" "cpu" "memory" "temperature" "battery" "clock" "tray" ];

      "hyprland/workspaces" = {
        format = "{icon}";
        format-icons = {
          "1" = ""; "2" = ""; "3" = ""; "4" = ""; "5" = "";
          "urgent" = "";
          "focused" = "";
          "default" = "";
        };
      };
      "hyprland/window" = {
        max-length = 50;
      };
      tray = {
        icon-size = 18;
        spacing = 10;
      };
      clock = {
        format = " {:%H:%M  %d/%m}"; # Requires a Nerd Font
        tooltip-format = "<big>{:%Y %B}</big>\n<tt><small>{calendar}</small></tt>";
      };
      cpu = {
        format = " {usage}%"; # Requires a Nerd Font
      };
      memory = {
        format = " {}%"; # Requires a Nerd Font
      };
      temperature = {
        thermal-zone = 0; # Adjust if necessary, check with `ls /sys/class/thermal`
        format = " {temperatureC}°C"; # Requires a Nerd Font
      };
      network = {
        format-wifi = "  {essid} ({signalStrength}%)"; # Requires a Nerd Font
        format-ethernet = " {ifname}"; # Requires a Nerd Font
        format-disconnected = "⚠ Disconnected";
        tooltip-format = "{ifname} via {gwaddr} ";
        on-click = "nm-connection-editor"; # Opens NetworkManager connection editor
      };
      pulseaudio = {
        format = "{volume}% {icon} ";
        format-bluetooth = "{volume}% {icon} "; # Requires a Nerd Font
        format-muted = " Muted"; # Requires a Nerd Font
        format-icons = {
          headphone = ""; # Requires a Nerd Font
          hands-free = ""; # Requires a Nerd Font
          headset = ""; # Requires a Nerd Font
          phone = ""; # Requires a Nerd Font
          portable = ""; # Requires a Nerd Font
          car = ""; # Requires a Nerd Font
          default = ["" ""]; # Requires a Nerd Font
        };
        on-click = "pavucontrol";
      };
      battery = {
        states = {
          good = 95;
          warning = 30;
          critical = 15;
        };
        format = "{capacity}% {icon}";
        format-charging = "{capacity}% "; # Requires a Nerd Font
        format-plugged = "{capacity}% "; # Requires a Nerd Font
        format-alt = "{time} {icon}";
        format-icons = ["" "" "" "" ""]; # Requires a Nerd Font
      };
    }];
    style = ''
      * {
          border: none;
          font-family: JetBrainsMono Nerd Font, FontAwesome, sans-serif;
          font-size: 14px;
          min-height: 0;
      }
      window#waybar {
          background: rgba(30, 30, 46, 0.8); /* Catppuccin Macchiato-like */
          color: #c6d0f5; /* Catppuccin Macchiato text */
      }
      #workspaces button {
          padding: 0 5px;
          background: transparent;
          color: #c6d0f5;
          border-bottom: 2px solid transparent;
      }
      #workspaces button.focused {
          color: #ca9ee6; /* Mauve */
          border-bottom: 2px solid #ca9ee6;
      }
      #workspaces button.urgent {
          color: #e78284; /* Red */
      }
      #mode, #pulseaudio, #network, #cpu, #memory, #temperature, #battery, #clock, #tray {
          padding: 0 10px;
      }
    '';
  };

  # Kitty terminal configuration (basic)
  programs.kitty = {
    enable = true;
    font = {
      name = "JetBrainsMono Nerd Font";
      size = 11;
    };
    theme = "Catppuccin-Macchiato"; # Needs kitty themes installed or configured manually
    settings = {
      # Some example settings
      background_opacity = "0.85";
      # shell = "zsh"; # If zsh is your default, kitty will use it
    };
  };

  # Dunst for notifications (alternative to Mako)
  services.dunst = {
    enable = true;
    settings = {
      global = {
        monitor = 0;
        follow = "mouse";
        width = 300;
        height = 300;
        origin = "top-right";
        offset = "10x50"; # X x Y
        scale = 0;
        notification_limit = 0;
        progress_bar = true;
        progress_bar_height = 10;
        progress_bar_frame_width = 1;
        progress_bar_min_width = 150;
        progress_bar_max_width = 150;
        indicate_hidden = "yes";
        separator_height = 2;
        padding = 8;
        horizontal_padding = 8;
        text_icon_padding = 0;
        font = "JetBrainsMono Nerd Font 10";
        line_height = 0;
        markup = "full";
        format = "<b>%s</b>\\n%b";
        alignment = "left";
        vertical_alignment = "center";
        show_age_threshold = 60;
        ellipsize = "middle";
        ignore_newline = "no";
        stack_duplicates = true;
        hide_duplicate_count = false;
        show_indicators = "yes";
        icon_position = "left";
        max_icon_size = 32;
        sticky_history = "yes";
        history_length = 20;
        dmenu = "/run/current-system/sw/bin/dmenu -p dunst";
        browser = "/run/current-system/sw/bin/xdg-open"; # Or specify your browser
        always_run_script = true;
        title = "Dunst";
        class = "Dunst";
        startup_notification = false;
        verbosity = "mesg";
        corner_radius = 8;
        force_xinerama = false;
        mouse_left_click = "close_current";
        mouse_middle_click = "do_action";
        mouse_right_click = "close_all";
      };
      urgency_low = {
        background = "#414863"; # Catppuccin Macchiato Surface0
        foreground = "#c6d0f5"; # Text
        timeout = 10;
      };
      urgency_normal = {
        background = "#525c7e"; # Surface1
        foreground = "#c6d0f5"; # Text
        timeout = 10;
      };
      urgency_critical = {
        background = "#e78284"; # Red
        foreground = "#282a36"; # Base
        frame_color = "#e78284"; # Red
        timeout = 0;
      };
    };
  };

  # GTK themeing
  gtk = {
    enable = true;
    font = {
      name = "Noto Sans";
      size = 11;
    };
    theme = {
      name = "Catppuccin-Macchiato-Standard-Mauve-Dark"; # Install this theme or choose another
      package = pkgs.catppuccin-gtk.override {
        accents = [ "mauve" ]; # Example: "rosewater", "flamingo", "pink", "mauve", "red", "maroon", "peach", "yellow", "green", "teal", "sky", "sapphire", "blue", "lavender"
        size = "standard"; # "standard" or "compact"
        variant = "macchiato"; # "latte", "frappe", "macchiato", "mocha"
      };
    };
    iconTheme = {
      name = "Papirus-Dark"; # Install this theme or choose another
      package = pkgs.papirus-icon-theme;
    };
    cursorTheme = {
      name = "Bibata-Modern-Ice"; # Matches Hyprland cursor
      package = pkgs.bibata-cursors;
    };
    # Settings for GTK 2, 3, 4
    gtk3.extraConfig = {
      gtk-application-prefer-dark-theme = true;
    };
    gtk4.extraConfig = {
      gtk-application-prefer-dark-theme = true;
    };
  };
  # Qt theming (make qt apps look like gtk)
  qt = {
    enable = true;
    platformTheme = "gtk2"; # Use "gnome" or "qtct" for alternative styling
    style = "gtk2";       # Tries to mimic GTK2
  };


  # Create a dummy wallpaper file for swaybg to use if you don't have one yet
  # Replace this with your actual wallpaper setup.
  home.file.".config/hypr/wallpaper.png".source = pkgs.nixos-icons + "/share/icons/hicolor/scalable/apps/nix-snowflake.svg"; # Example wallpaper

  # Symlink .config directories for easier access if needed, or use XDG paths
  # home.file.".config/rofi" = { source = config.xdg.configHome + "/rofi"; };
  # home.file.".config/waybar" = { source = config.xdg.configHome + "/waybar"; };

  # Enable programs that need to be started with the session
  home.services.network-manager-applet.enable = true;
  home.services.blueman-applet.enable = true;


  # Allow home-manager to manage Git configuration
  programs.git = {
    enable = true;
    userName = "saintbelow";
    userEmail = "saintbelow@example.com"; # Change to your email
  };

  # Set XDG specific directories
  xdg.userDirs = {
    enable = true;
    createDirectories = true; # Ensure these directories are created
    desktop = "$HOME/Desktop";
    documents = "$HOME/Documents";
    download = "$HOME/Downloads";
    music = "$HOME/Music";
    pictures = "$HOME/Pictures";
    publicShare = "$HOME/Public";
    templates = "$HOME/Templates";
    videos = "$HOME/Videos";
  };

  # For managing dotfiles that are not directly supported by home-manager options
  # xdg.configFile."someapp/config.json".text = ''
  # { "key": "value" }
  # '';

  programs.bash.enable = true; # Still good to have bash configured

  # Important for various services that rely on D-Bus user session
  systemd.user.services.dbus.enable = true;
}
